* Diseño de Interfaces Web - Presentación
- Ciclo Formativo: *Desarrollo de Aplicaciones Web*
- Profesor: *Pedro Prieto Alarcón*

** Descripción del curso
** Requisitos previos
** Contenidos
** Tutorial básico de GIT
*** Descarga
Puedes descargar el cliente de GIT ~msysgit~ de https://github.com/msysgit/msysgit/releases. Debes seleccionar el archivo ~PortableGIT~.

Una vez descargado, descomprímelo a una carpeta y sitúa la carpeta en el directorio raíz del pendrive o disco duro portátil. Nombra esta carpeta como ~GIT~.
*** Ejecución de GIT
Para ejecutar GIT tienes dos opciones:
- Ejecutarlo simulando un entorno de *Linux Bash*. Para ello ejecuta ~git-bash.bat~.
- Ejecutarlo en un entorno de consola de *Windows*. Para ello ejecuta ~git-cmd.bat~.
Ejecutando cualquiera de las dos opciones se abrirá una consola de comandos. Desde allí se podrá ejecutar el comando ~git~ sin necesidad de realizar modificaciones en el sistema.

*OJO*: si se abre una consola normal del sistema no se podrá ejecutar GIT.
*** Configuración inicial
Para configurar GIT con nuestro usuario y correo electrónico hay que ejecutar:
#+BEGIN_SRC sh
  git config --global user.name "Nombre y apellido"
  git config --global user.email CORREO@ELECTRONICO
  git config --glogal core.editor notepad
#+END_SRC
*** Clonado de un repositorio
Para obtener una copia local de un repositorio remoto hay que ejecutar el comando:
#+BEGIN_SRC sh
git clone RUTA_AL_REPOSITORIO
#+END_SRC
La ~RUTA_AL_REPOSITORIO~ se obtiene de la página de GitHub del repositorio correspondiente.
*** Actualización de cambios generados en el repositorio
Si el repositorio original se modifica después de realizar el clonado inicial puede realizarse la actualización ejecutando:
#+BEGIN_SRC sh
git pull
#+END_SRC
*** Modificación de archivos locales
Después de realizar cambios en los archivos es posible visualizarlos mediante el comando:
#+BEGIN_SRC sh
git diff
#+END_SRC
*** Comprobación del estado
Para comprobar el estado del repositorio puede ejecutarse:
#+BEGIN_SRC sh
git status
#+END_SRC
*** Grabación de los cambios (add y commit)
Después de realizar cambios en el repositorio local se deben añadir con el siguiente comando:
#+BEGIN_SRC sh
git add .
#+END_SRC
De esta manera se añadirán los cambios realizados en los archivos y los archivos nuevos que se hayan creado. Es importante incluir el *punto* en el comando.

Por último, para guardar los cambios se debe ejecutar el comando:
#+BEGIN_SRC sh
git commit -m "Mensaje informativo"
#+END_SRC
De esta manera se guardarán los cambios realizados.
*** Guardado de los cambios en el repositorio remoto (push)
Para actualizar los cambios en el repositorio remoto (GitHub) se debe ejecutar)
#+BEGIN_SRC sh
git push
#+END_SRC
De esta manera se guardarán los cambios en el repositorio remoto de GitHub.
*** Guía completa
Para conocer Git en profundidad puedes consultar el libro publicado en este [[http://git-scm.com/book/es/v1/][enlace]].
** Tareas individuales
*** Método de trabajo
1. Hacer un fork del repositorio del ejercicio correspondiente (dentro de https://github.com/interfacesweb). De esta manera se creará una copia del mismo en tu cuenta de GitHub personal.
2. Clonar el repositorio copiado en el equipo.
3. Modificar los archivos de acuerdo con el enunciado de la práctica (el enunciado se encuentra en el archivo ~README.org~ y puede leerse con el formato correcto en la página de GitHub).
4. Guardar los cambios realizados (~commit~) en el repositorio.
5. Subir (~push~) los cambios a GitHub.
6. Cuando se haya terminado, crear una ~pull request~ para que el profesor pueda comprobar los cambios.

Los cambios subidos al repositorio personal pueden visualizarse automáticamente en ~USUARIO.github.io/EJERCICIO~. Esto se consigue utilizando la tecnología de [[https://pages.github.com/][Páginas de GitHub]].
** Flujo de trabajo GIT para Scrum
A continuación se muestra un ejemplo de flujo de trabajo de Git para grupos. Existen muchas otras posibilidades, pero considero que ésta es de las que menos problemas pueden presentar. No obstante, si el equipo de desarrollo considera más adecuado utilizar otro método podrá hacerlo sin ningún problema.

Este flujo de trabajo está basado en *repositorios compartidos* (/shared repositories/), donde todos los miembros del equipo de desarrollo tienen permisos para realizar cambios (pueden hacer /push/). 

Para evitar la aparición de conflictos, cada usuario realizará sus cambios en una *rama* distinta. De esta manera los cambios que haga un usuario no afectarán al resto. Una vez *finalizado el trabajo*, el usuario *incorporará* los cambios realizados en su rama a la *rama principal* (/merge/).

*IMPORTANTE*. En todos los comandos se considera que la rama de trabajo principal es /master/. En algunos proyectos la rama principal deberá ser /gh-pages/ para que los cambios se muestren en github.io. Si es el caso, se deberá reemplazar /master/ por /gh-pages/.

1. Actualizar origen:
   - git pull origin master
2. Crear rama para el trabajo personal:
   - git checkout -b /nombre_rama/
3. Trabajar (add - commit, add - commit, add - commit,...).
   - Subir cambios:
     - git push origin /nombre_rama/
4. Cuando se desee, y especialmente al terminar la tarea completamente:
   - Actualizar de nuevo con los cambios de los demás (incorporar los cambios que se hayan subido a la rama principal por otros miembros del equipo).
     - git fetch origin
     - git merge origin/master
   - Arreglar conflictos si aparecen (habrá que modificar los ficheros en conflicto, guardar los cambios y hacer un commit nuevo).
   - Volver a subir la rama con los cambios:
     - git push origin /nombre_rama/
5. Al terminar, con todos los cambios de la rama subidos a Github, crear *pull request* desde GitHub. De esta manera todos los miembros del equipo recibirán un aviso con la notificación de que hay cambios nuevos que se van a incorporar a la rama principal.
6. Opcionalmente, los miembros del equipo pueden inspeccionar y comentar el pull request.
7. Aceptar el pull request o seguir instrucciones para corregir conflictos.
8. Hacer el /merge/ de la rama en cuestión.
9. Borrar la rama (desde GitHub)
10. Borrar la rama en local (ojo, sólo cuando estemos seguros de que los cambios se han integrado en Github)
    - git checkout master
    - git pull origin master
    - git branch -D /nombre_rama/
 
